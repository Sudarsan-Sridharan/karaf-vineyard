/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.karaf.vineyard.registry.storage;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Dictionary;

import javax.sql.DataSource;

import org.apache.karaf.vineyard.common.Service;
import org.apache.karaf.vineyard.registry.api.RegistryService;
import org.osgi.service.component.ComponentContext;
import org.osgi.service.component.annotations.Activate;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Implementation of the service processing, storing the services into a database.
 */
@Component(
        name = "org.apache.karaf.vineyard.registry.storage.sqlService",
        immediate = true
)
public class SqlRegistryService implements RegistryService {

    private final static Logger LOGGER = LoggerFactory.getLogger(SqlRegistryService.class);

    //TODO private final static String createTableQueryGenericTemplate = "";
    //TODO private final static String createTableQueryMySQLTemplate = "";
    
    private final static String[] createTableQueryDerbyTemplate = new String[] 
            {
                    "CREATE SCHEMA VINEYARD",
                    
                    "CREATE TABLE VINEYARD.ENVIRONMENT(id SMALLINT NOT NULL GENERATED BY DEFAULT AS IDENTITY " 
                            + " CONSTRAINT ENVIRONMENT_PK PRIMARY KEY, name VARCHAR(200) NOT NULL, description VARCHAR(8192), "
                            + " scope VARCHAR(200))",
                            
                    "CREATE TABLE VINEYARD.MAINTAINER(name VARCHAR(200) CONSTRAINT MAINTAINER_PK PRIMARY KEY, "
                            + " email VARCHAR(200), team VARCHAR(200))",
                            
                    "CREATE TABLE VINEYARD.DATAFORMAT(id SMALLINT NOT NULL GENERATED BY DEFAULT AS IDENTITY "
                            + " CONSTRAINT DATAFORMAT_PK PRIMARY KEY, name VARCHAR(200) NOT NULL, sample VARCHAR(8192), " 
                            + " dataschema VARCHAR(8192))",
                            
                    "CREATE TABLE VINEYARD.ENDPOINT(location VARCHAR(200) NOT NULL CONSTRAINT ENDPOINT_PK PRIMARY KEY, "
                            + " eptinput SMALLINT, eptoutput SMALLINT, "
                            + " CONSTRAINT ENDPT_INPUT_DTFM_FK FOREIGN KEY (eptinput) REFERENCES VINEYARD.DATAFORMAT (id),"
                            + " CONSTRAINT ENDPT_OUTPUT_DTFM_FK FOREIGN KEY (eptoutput) REFERENCES VINEYARD.DATAFORMAT (id))",
                            
                    "CREATE TABLE VINEYARD.SERVICE(id SMALLINT NOT NULL GENERATED BY DEFAULT AS IDENTITY "
                            + " CONSTRAINT SERVICE_PK PRIMARY KEY, name VARCHAR(200) NOT NULL, description VARCHAR(8192))",
                            
                    "CREATE TABLE VINEYARD.X_ENV_MNT(id_environment SMALLINT, name_maintainer VARCHAR(200), "
                            + " role VARCHAR(200), "
                            + " CONSTRAINT X_ENV_MNT_PK PRIMARY KEY (id_environment, name_maintainer), "
                            + " CONSTRAINT X_ENV_MNT_ENV_FK FOREIGN KEY (id_environment) REFERENCES VINEYARD.ENVIRONMENT (id), "
                            + " CONSTRAINT X_ENV_MNT_MNT_FK FOREIGN KEY (name_maintainer) REFERENCES VINEYARD.MAINTAINER (name))",
                            
                    "CREATE TABLE VINEYARD.X_SRV_ENV(id_service SMALLINT, id_environment SMALLINT, "
                            + " state VARCHAR(200), version VARCHAR(50), endpoint VARCHAR(200), gateway VARCHAR(200), "
                            + " CONSTRAINT X_SRV_ENV_PK PRIMARY KEY (id_service, id_environment),"
                            + " CONSTRAINT X_SRV_ENV_SRV_FK FOREIGN KEY (id_service) REFERENCES VINEYARD.SERVICE (id), "
                            + " CONSTRAINT X_SRV_ENV_ENV_FK FOREIGN KEY (id_environment) REFERENCES VINEYARD.ENVIRONMENT (id), "
                            + " CONSTRAINT X_SRV_ENV_ENDPT_FK FOREIGN KEY (endpoint) REFERENCES VINEYARD.ENDPOINT (location), "
                            + " CONSTRAINT X_SRV_ENV_GTW_FK FOREIGN KEY (gateway) REFERENCES VINEYARD.ENDPOINT (location))",
                            
                    "CREATE TABLE VINEYARD.X_SRV_ENV_META(id_service SMALLINT, id_environment SMALLINT, "
                            + " metakey VARCHAR(200), metavalue VARCHAR(200), "
                            + " CONSTRAINT X_SRV_ENV_META_PK PRIMARY KEY (id_service, id_environment),"
                            + " CONSTRAINT X_SRV_ENV_META_FK FOREIGN KEY (id_service, id_environment) "
                            + " REFERENCES VINEYARD.X_SRV_ENV (id_service, id_environment))"
            };
            
    @Reference(target = "(osgi.jndi.service.name=jdbc/vineyard)")
    private DataSource dataSource;

    private String dialect;

    @Activate
    public void activate(ComponentContext context) {
        open(context.getProperties());
    }
    
    public void open(Dictionary<String, Object> config) {
        this.dialect = getValue(config, "dialect", "derby");
        LOGGER.debug("Dialect {} ", this.dialect);
        LOGGER.debug("Datasource {} ", this.dataSource);
        try (Connection connection = dataSource.getConnection()) {
            createTables(connection);
        } catch (Exception e) {
            LOGGER.debug("Error creating table ", e);
        }
    }

    private String getValue(Dictionary<String, Object> config, String key, String defaultValue) {
        String value = (String) config.get(key);
        return (value != null) ? value : defaultValue;
    }

    private void createTables(Connection connection) {

        DatabaseMetaData dbm;
        ResultSet tables;
        
        try {
            dbm = connection.getMetaData();
            
            tables = dbm.getTables(null, "VINEYARD", "SERVICE", null);
            if (!tables.next()) {
                LOGGER.info("Tables does not exist");
                // Tables does not exist so we create all the tables
                String[] createTemplate = null;
                if (dialect.equalsIgnoreCase("mysql")) {
                    //TODO createTemplate = createTableQueryMySQLTemplate;
                } else if (dialect.equalsIgnoreCase("derby")) {
                    createTemplate = createTableQueryDerbyTemplate;
                } else {
                    //TODO createTemplate = createTableQueryGenericTemplate;
                }
                try (Statement createStatement = connection.createStatement()) {
                    for (int cpt = 0; cpt < createTemplate.length; cpt++) {
                        createStatement.addBatch(createTemplate[cpt]);
                    }
                    createStatement.executeBatch();
                    LOGGER.debug("Schema and tables has been created");
                } catch (SQLException exception) {
                    LOGGER.error("Can't create tables", exception);
                }
            } else {
                LOGGER.info("Tables already exist");
            }
        } catch (SQLException exception) {
            LOGGER.error("Can't verify tables existence", exception);
        }
    }

    @Override
    public void add(Service service) {
        // TODO implement method

    }

    @Override
    public void delete(Service service) {
        // TODO implement method

    }

    @Override
    public void delete(String id) {
        // TODO implement method

    }

    @Override
    public void update(Service service) {
        // TODO implement method

    }

    @Override
    public Service get(String id) {
        // TODO implement method
        return null;
    }



}
