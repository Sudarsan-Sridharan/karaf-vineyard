/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.karaf.vineyard.registry.storage;

/**
 * SQL Queries Constants.
 */
public final class SqlRegistryConstants {

    //TODO public final static String createTableQueryGenericTemplate = "";
    //TODO public final static String createTableQueryMySQLTemplate = "";

    public final static String DATABASE_SCHEMA = "VINEYARD";

    public final static String[] createTableQueryDerbyTemplate = new String[] {
            "CREATE SCHEMA " + DATABASE_SCHEMA,

            "CREATE TABLE " + DATABASE_SCHEMA + ".ENVIRONMENT(id SMALLINT NOT NULL GENERATED BY DEFAULT AS IDENTITY "
                    + " CONSTRAINT ENVIRONMENT_PK PRIMARY KEY, name VARCHAR(200) NOT NULL, description VARCHAR(8192), "
                    + " scope VARCHAR(200))",

            "CREATE TABLE " + DATABASE_SCHEMA + ".MAINTAINER(name VARCHAR(200) CONSTRAINT MAINTAINER_PK PRIMARY KEY, "
                    + " email VARCHAR(200), team VARCHAR(200))",

            "CREATE TABLE " + DATABASE_SCHEMA + ".DATAFORMAT(id SMALLINT NOT NULL GENERATED BY DEFAULT AS IDENTITY "
                    + " CONSTRAINT DATAFORMAT_PK PRIMARY KEY, name VARCHAR(200) NOT NULL, sample VARCHAR(8192), "
                    + " dataschema VARCHAR(8192))",

            "CREATE TABLE " + DATABASE_SCHEMA + ".ENDPOINT(id SMALLINT NOT NULL GENERATED BY DEFAULT AS IDENTITY "
                    + " CONSTRAINT ENDPOINT_PK PRIMARY KEY, location VARCHAR(200) NOT NULL, eptinput SMALLINT, eptoutput SMALLINT, "
                    + " CONSTRAINT ENDPT_INPUT_DTFM_FK FOREIGN KEY (eptinput) REFERENCES " + DATABASE_SCHEMA + ".DATAFORMAT (id),"
                    + " CONSTRAINT ENDPT_OUTPUT_DTFM_FK FOREIGN KEY (eptoutput) REFERENCES " + DATABASE_SCHEMA + ".DATAFORMAT (id))",

            "CREATE TABLE " + DATABASE_SCHEMA + ".SERVICE(id SMALLINT NOT NULL GENERATED BY DEFAULT AS IDENTITY "
                    + " CONSTRAINT SERVICE_PK PRIMARY KEY, name VARCHAR(200) NOT NULL, description VARCHAR(8192))",

            "CREATE TABLE " + DATABASE_SCHEMA + ".REGISTRATION(id SMALLINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, id_service SMALLINT, id_environment SMALLINT, "
                    + " state VARCHAR(200), version VARCHAR(50), endpoint SMALLINT, gateway SMALLINT, throttling BIGINT, "
                    + " CONSTRAINT X_REGISTRATION_PK PRIMARY KEY (id),"
                    + " CONSTRAINT X_REGISTRATION_SRV_FK FOREIGN KEY (id_service) REFERENCES " + DATABASE_SCHEMA + ".SERVICE (id), "
                    + " CONSTRAINT X_REGISTRATION_ENV_FK FOREIGN KEY (id_environment) REFERENCES " + DATABASE_SCHEMA + ".ENVIRONMENT (id), "
                    + " CONSTRAINT X_REGISTRATION_ENDPT_FK FOREIGN KEY (endpoint) REFERENCES " + DATABASE_SCHEMA + ".ENDPOINT (id), "
                    + " CONSTRAINT X_REGISTRATION_GTW_FK FOREIGN KEY (gateway) REFERENCES " + DATABASE_SCHEMA + ".ENDPOINT (id))",

            "CREATE TABLE " + DATABASE_SCHEMA + ".X_ENV_MNT(id_environment SMALLINT, name_maintainer VARCHAR(200), "
                    + " role VARCHAR(200), "
                    + " CONSTRAINT X_ENV_MNT_PK PRIMARY KEY (id_environment, name_maintainer), "
                    + " CONSTRAINT X_ENV_MNT_ENV_FK FOREIGN KEY (id_environment) REFERENCES " + DATABASE_SCHEMA + ".ENVIRONMENT (id), "
                    + " CONSTRAINT X_ENV_MNT_MNT_FK FOREIGN KEY (name_maintainer) REFERENCES " + DATABASE_SCHEMA + ".MAINTAINER (name))",

            "CREATE TABLE " + DATABASE_SCHEMA + ".X_REG_META(id_registration SMALLINT, metakey VARCHAR(200), metavalue VARCHAR(200), "
                    + " CONSTRAINT X_REG_META_FK FOREIGN KEY (id_registration) REFERENCES " + DATABASE_SCHEMA + ".REGISTRATION (id))"
    };

    /** Select queries */
    public final static String selectEnvironmentSql =
            "select id, name, description, scope "
                    + "from " + DATABASE_SCHEMA + ".ENVIRONMENT";
    public final static String selectMaintainerSql =
            "select name, email, team "
                    + "from " + DATABASE_SCHEMA + ".MAINTAINER";
    public final static String selectDataformatSql =
            "select id, name, sample, dataschema "
                    + "from " + DATABASE_SCHEMA + ".DATAFORMAT";
    public final static String selectEndpointSql =
            "select id, location, eptinput, eptoutput "
                    + "from " + DATABASE_SCHEMA + ".ENDPOINT";
    public final static String selectServiceSql =
            "select id, name, description "
                    + "from " + DATABASE_SCHEMA + ".SERVICE";
    public final static String selectMaintainerForEnvironmentSql =
            "select m.name name, m.email email, m.team team, x.role role "
                    + "from " + DATABASE_SCHEMA + ".MAINTAINER m, " + DATABASE_SCHEMA + ".X_ENV_MNT x "
                    + "where x.name_maintainer = m.name "
                    + "and x.id_environment = ?";
    public final static String selectRegistrationSql =
            "select e.id id_environment, r.id id, r.state state, r.version version, r.endpoint endpoint, r.gateway gateway, r.throttling throttling "
                    + "from " + DATABASE_SCHEMA + ".ENVIRONMENT e, " + DATABASE_SCHEMA + ".REGISTRATION r "
                    + "where r.id = ?";
    public final static String selectMetadataRegistrationSql =
            "select metakey, metavalue "
                    + "from " + DATABASE_SCHEMA + ".X_REG_META "
                    + "where id = ? ";

    /** Insert queries */
    public final static String insertEnvironmentSql =
            "insert into " + DATABASE_SCHEMA + ".ENVIRONMENT "
                    + "(name, description, scope) "
                    + "values (?, ?, ?)";
    public final static String insertMaintainerSql =
            "insert into " + DATABASE_SCHEMA + ".MAINTAINER "
                    + "(name, email, team) "
                    + "values (?, ?, ?)";
    public final static String insertDataformatSql =
            "insert into " + DATABASE_SCHEMA + ".DATAFORMAT "
                    + "(name, sample, dataschema) "
                    + "values (?, ?, ?)";
    public final static String insertEndpointSql =
            "insert into " + DATABASE_SCHEMA + ".ENDPOINT "
                    + "(location, eptinput, eptoutput) "
                    + "values (?, ?, ?)";
    public final static String insertServiceSql =
            "insert into " + DATABASE_SCHEMA + ".SERVICE "
                    + "(name, description) "
                    + "values (?, ?)";
    public final static String insertMaintainerForEnvironmentSql =
            "insert into " + DATABASE_SCHEMA + ".X_ENV_MNT "
                    + "(id_environment, name_maintainer, role) values (?, ?, ?)";
    public final static String insertRegistrationSql =
            "insert into " + DATABASE_SCHEMA + ".REGISTRATION "
                    + "(id_service, id_environment, state, version, endpoint, gateway, throttling) "
                    + "values (?, ?, ?, ?, ?, ?, ?)";
    public final static String insertMetadataRegistrationSql =
            "insert into " + DATABASE_SCHEMA + ".X_REG_META "
                    + "(id, metakey, metavalue) "
                    + "values (?, ?, ?)";

    /** Update queries */
    public final static String updateEnvironmentSql =
            "update " + DATABASE_SCHEMA + ".ENVIRONMENT "
                    + "set name = ?, description = ?, scope = ? "
                    + "where id = ?";
    public final static String updateMaintainerSql =
            "update " + DATABASE_SCHEMA + ".MAINTAINER "
                    + "set email = ?, team = ? "
                    + "where name = ?";
    public final static String updateDataformatSql =
            "update " + DATABASE_SCHEMA + ".DATAFORMAT "
                    + "set name = ?, sample = ?, dataschema = ? "
                    + "where id = ?";
    public final static String updateEndpointSql =
            "update " + DATABASE_SCHEMA + ".ENDPOINT "
                    + "set location = ?, eptinput = ?, eptoutput = ? "
                    + "where id = ?";
    public final static String updateServiceSql =
            "update " + DATABASE_SCHEMA + ".SERVICE "
                    + "set name = ?, description = ? "
                    + "where id = ?";
    public final static String updateRegistrationSql =
            "update " + DATABASE_SCHEMA + ".REGISTRATION "
                    + "set state = ?, version = ?, throttling = ? "
                    + "where id = ?";

    /** Delete queries */
    public final static String deleteEnvironmentSql =
            "delete from " + DATABASE_SCHEMA + ".ENVIRONMENT "
                    + "where id = ?";
    public final static String deleteMaintainerSql =
            "delete from " + DATABASE_SCHEMA + ".MAINTAINER "
                    + "where name = ?";
    public final static String deleteDataformatSql =
            "delete from " + DATABASE_SCHEMA + ".DATAFORMAT "
                    + "where id = ?";
    public final static String deleteEndpointSql =
            "delete from " + DATABASE_SCHEMA + ".ENDPOINT "
                    + "where id = ?";
    public final static String deleteServiceSql =
            "delete from " + DATABASE_SCHEMA + ".SERVICE "
                    + "where id = ?";
    public final static String deleteRegistrationSql =
            "delete from " + DATABASE_SCHEMA + ".REGISTRATION "
                    + "where id = ?";
    public final static String deleteMaintainerForEnvironmentSql =
            "delete from " + DATABASE_SCHEMA + ".X_ENV_MNT ";
    public final static String deleteMetadataRegistrationSql =
            "delete from " + DATABASE_SCHEMA + ".X_REG_META "
                    + "where id = ?";
}
